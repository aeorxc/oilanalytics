from oilanalytics.freight import route_consts as constimport pandas as pdimport cachetools.funcfrom commodutil import pandasutil as pdu## TCE Calculation Notes## https://www.balticexchange.com/content/balticexchange/consumer/en/my-baltic/downloads.html# https://www.balticexchange.com/content/dam/balticexchange/consumer/members-area/documents/data_services/market_information/tce-dirty/TD2-TCE_Calculation.pdf# https://www.balticexchange.com/content/dam/balticexchange/consumer/members-area/documents/data_services/market_information/tce_documents/TC2_37-TCE_Calculation.pdf# https://www.balticexchange.com/content/dam/balticexchange/consumer/members-area/documents/data_services/documentation/tce/Baltic%20Exchange%20Tanker%20TCE%20Calculator%20SEP.20.xlsx# Note: add +5 for bunker premiumdef extract_bunker_prices(row):    vlsfo = row.VLSFO + 5    mgo = row.MGO + 5    hsfo = row.HSFO + 5    return vlsfo, mgo, hsfodef china_eca_fuel_history(row, voyage_days):    vlsfo, mgo, hsfo = extract_bunker_prices(row)    if row.name.year >= 2020: # IMO        return vlsfo * voyage_days['voyage_noneca'] + mgo * voyage_days['voyage_eca']    if row.name.year >= 2019: # Pre-IMO, China ECA        return hsfo * voyage_days['voyage_noneca'] + mgo * voyage_days['voyage_eca']    else:        return hsfo * (voyage_days['voyage_noneca'] + voyage_days['voyage_eca'])def eca_fuel_history(row, voyage_days):    vlsfo, mgo, hsfo = extract_bunker_prices(row)    if row.name.year >= 2020: # IMO        return vlsfo * voyage_days['voyage_noneca'] + mgo * voyage_days['voyage_eca']    if row.name.year >= 2014: # Pre-IMO        return hsfo * voyage_days['voyage_noneca'] + mgo * voyage_days['voyage_eca']    if row.name >= pd.to_datetime('2010-07-06'): # ECA 1%        return hsfo * voyage_days['voyage_noneca'] + mgo * voyage_days['voyage_eca']    else:        return hsfo * (voyage_days['voyage_noneca'] + voyage_days['voyage_eca'])def non_eca_fuel_history(row, voyage_days):    vlsfo, mgo, hsfo = extract_bunker_prices(row)    if row.name.year >= 2020: # IMO        return vlsfo * voyage_days['voyage_noneca']    if row.name.year >= 2014: # Pre-IMO        return hsfo * voyage_days['voyage_noneca']def add_rotterdam_port_dues(data, route):    a = 'Rotterdam_Port_Dues_Product_A' if route.startswith('tc') else 'Rotterdam_Port_Dues_Crude_A'    b = 'Rotterdam_Port_Dues_Product_B' if route.startswith('tc') else 'Rotterdam_Port_Dues_Crude_B'    if not data.columns.str.startswith('Rotterdam_Port_Dues').any():        rott = get_rott_port_dues()        if pd.infer_freq(data.index) == 'MS':            data[a] = rott.iloc[-1][a]            data[a] = rott.iloc[-1][b]        else:            data = pdu.mergets(data, rott)    data['GrossFreight'] = data['GrossFreight'] + ((data[a] + (data[a] * 1.33639)) * const.grt[route])def calc(route, data):    data['Freight_USDMT'] = data.FlatRate * (data.WorldScale/100)    data['GrossFreight'] = const.dwt[route] * data['Freight_USDMT']    # GRT Rotterdam Port dues    if route in ['tc2', 'td20']:        add_rotterdam_port_dues(data, route)    if route in ['tc5']:        data['GrossFreight'] = data['GrossFreight'] + (const.dwt[route] * const.rastanura_prem)    if route in ['tc12']:        data['GrossFreight'] = data['GrossFreight'] + (const.dwt[route] * 0.24)    # Bunker costs    if route in const.route_using_sing_fuels: # convert Sing MGO to bbl        data['MGO'] = data['MGO'] * 7.45    if route in ['tc12']:        data['BunkerCost'] = data.apply(lambda x: non_eca_fuel_history(x, const.voyage_days[route]), 1)    if route in ['tcx']:        data['BunkerCost'] = data.apply(lambda x: china_eca_fuel_history(x, const.voyage_days[route]), 1)    else:        data['BunkerCost'] = data.apply(lambda x: eca_fuel_history(x, const.voyage_days[route]), 1)    # Net Freight    data['NetFreight'] = data['GrossFreight'] * (1 - const.commission[route])    # Total Costs    data['TotalCosts'] = data.BunkerCost + data.LoadPortCosts + data.DischargePortCosts    # TCE    data['NetIncome'] = data.NetFreight - data.TotalCosts    data['TCE'] = data.NetIncome / const.voyage_days[route]['voyage_days']    return data@cachetools.func.ttl_cache(ttl=100 * 60)def get_rott_port_dues(resample_daily=True):    url = 'https://raw.githubusercontent.com/aeorxc/oilanalytics/main/oilanalytics/freight/tce/rott_port_dues.csv'    df = pd.read_csv(url, index_col=0, parse_dates=True)    if resample_daily:        df = df.resample('B').mean().fillna(method='ffill')    return df