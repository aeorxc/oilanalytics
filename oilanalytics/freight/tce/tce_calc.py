from oilanalytics.freight.tce import tce_consts as constimport pandas as pd## TCE Calculation Notes## https://www.balticexchange.com/content/balticexchange/consumer/en/my-baltic/downloads.htmldef china_eca_fuel_history(row, voyage_days):    if row.name.year >= 2020: # IMO        return row.VLSFO * voyage_days['voyage_noneca'] + row.MGO * voyage_days['voyage_eca']    if row.name.year >= 2019: # Pre-IMO, China ECA        return row.HSFO * voyage_days['voyage_noneca'] + row.MGO * voyage_days['voyage_eca']    else:        return row.HSFO * (voyage_days['voyage_noneca'] + voyage_days['voyage_eca'])def eca_fuel_history(row, voyage_days):    if row.name.year >= 2020: # IMO        return row.VLSFO * voyage_days['voyage_noneca'] + row.MGO * voyage_days['voyage_eca']    if row.name.year >= 2014: # Pre-IMO        return row.HSFO * voyage_days['voyage_noneca'] + row.MGO * voyage_days['voyage_eca']    if row.name >= pd.to_datetime('2010-07-06'): # ECA 1%        return row.HSFO * voyage_days['voyage_noneca'] + row.LSFO * voyage_days['voyage_eca']    else:        return row.HSFO * (voyage_days['voyage_noneca'] + voyage_days['voyage_eca'])def non_eca_fuel_history(row, voyage_days):    if row.name.year >= 2020: # IMO        return row.VLSFO * voyage_days['voyage_noneca']    if row.name.year >= 2014: # Pre-IMO        return row.HSFO * voyage_days['voyage_noneca']def calc(arb, data):    data['GrossFreight'] = const.dwt[arb] * (data.FlatRate/100) * data.WorldScale    # GRT Rotterdam Port dues    if arb in ['tc2', 'td20']:        data['GrossFreight'] = data['GrossFreight'] + ((data.RottA + (data.RottB * 1.33639)) * const.grt[arb])    if arb in ['tc5']:        data['GrossFreight'] = data['GrossFreight'] + (const.dwt[arb] * const.rastanura_prem)    if arb in ['tc12']:        data['GrossFreight'] = data['GrossFreight'] + (const.dwt[arb] * 0.24)    # Bunker costs    if arb in ['tc12']:        data['BunkerCost'] = data.apply(lambda x: non_eca_fuel_history(x, const.voyage_days[arb]), 1)    if arb in ['tc5']:        data['BunkerCost'] = data.apply(lambda x: china_eca_fuel_history(x, const.voyage_days[arb]), 1)    else:        data['BunkerCost'] = data.apply(lambda x: eca_fuel_history(x, const.voyage_days[arb]), 1)    # Net Freight    data['NetFreight'] = data['GrossFreight'] * (1 - const.commission[arb])    # TCE    data['NetIncome'] = data.NetFreight - (data.BunkerCost + data.PortCosts)    data['TCE'] = data.NetIncome / const.voyage_days[arb]['voyage_days']    return data