import pandas as pdfrom commodutil import pandasutil as pdufrom oilanalytics.freight.tce import tce_constsrott_fuels = {    'AAYWT00': 'MGO', # Gasoil 0.1% Rdam FOB Barges Platt's Mid (US$/T)    'PUMFD00': 'VLSFO', # 0.5% FOB Rotterdam barge    'PUAAP00': 'LSFO', # No.6 1%/LSFO NWE FOB Barges Platt's Mid (US$/T)    'PUABC00': 'HSFO' # HSFO 3.5% NWE FOB Barges Platt's Mid (US$/T)}rott_fuels_fwd = {    'MGO' : 'GO_01_FOBB_ARA',    'VLSFO' : 'OIL_VLSFO_FOBB_ARA',}sing_fuels = {    'AAFEX00': 'MGO', # Gasoil .05%S (500ppm) FOB Spore Cargo (DW USD/BBL)    'AMFSA00': 'VLSFO', # Marine Fuel 0.5% FOB Spore Cargo $/mt (DW USD/MT)    #'AAFEX00': 'LSFO', # Gasoil 0.05% Singapore Platt's Mid (US$/Bbl)    'PPXDK00': 'HSFO' # HSFO 380 4.0% Singapore Platt's Mid (US$/T)}sing_fuels_fwd = {    'MGO' : 'OIL_VLSFO_FOB_SING',    'VLSFO' : 'GO_01_FOBB_ARA',}def get_fuels(fuelloc:str = 'rott'):    if fuelloc == 'rott':        return rott_fuels    elif fuelloc == 'sing':        return sing_fuelsdef common_calcs(df, consts): # TODO rename to shared_calcs when all routes have been copied in    df['NetFreight'] = df['GrossFreight'] * (1 - consts['commission'])    df['NetIncome'] = df.NetFreight - (df.BunkerCost + df.PortCosts)    df['TCE'] = df.NetIncome / consts['voyage_days']    return dfdef eca_fuel_history(row):    if row.name.year >= 2020: # IMO        return row.VLSFO * row.voyage_noneca + row.MGO * row.voyage_eca    if row.name.year >= 2014: # Pre-IMO        return row.HSFO * row.voyage_noneca + row.MGO * row.voyage_eca    if row.name >= pd.to_datetime('2010-07-06'): # ECA 1%        return row.HSFO * row.voyage_noneca + row.LSFO * row.voyage_eca    else:        return row.HSFO * (row.voyage_noneca + row.voyage_eca)def china_eca_fuel_history(row):    if row.name.year >= 2020: # IMO        return row.VLSFO * row.voyage_noneca + row.MGO * row.voyage_eca    if row.name.year >= 2019: # Pre-IMO, China ECA        return row.HSFO * row.voyage_noneca + row.MGO * row.voyage_eca    else:        return row.HSFO * (row.voyage_noneca + row.voyage_eca)def non_eca_fuel_history(row):    if row.name.year >= 2020: # IMO        return row.VLSFO * row.voyage_noneca    if row.name.year >= 2014: # Pre-IMO        return row.HSFO * row.voyage_nonecadef rott_port_dues(df, consts, histfwd=True):    # GRT Port rott dues = (Dues A + Dues B) * GRT - see page D2 in WS book    parta = ds.debbie_forward_table(consts['rotta'], hist=histfwd)    partb = ds.debbie_forward_table(consts['rottb'], hist=histfwd)    df = pdu.mergets(df, parta, rightl='RottA')    df = pdu.mergets(df, partb, rightl='RottB')    df['GrossFreight'] = df['GrossFreight'] + ((df.RottA + (df.RottB * 1.33639)) * consts['grt'])    return dfdef calc_base(consts):    lim_series = {consts['ws']: 'WS'}    fuels = get_fuels(consts['fuelloc'])    lim_series = {**fuels, **lim_series}    limd = lim.series(lim_series)    for fuel in fuels.keys():  # +5 for bunker premium        if fuel in ['AAFEX00']:            limd[fuels[fuel]] = (limd[fuels[fuel]] * 7.45) + 5        else:            limd[fuels[fuel]] = limd[fuels[fuel]] + 5    res = cdb.series(consts['fr'], start_date='2008') # todo Move to lim when uploads stable    res = pdu.mergets(res, limd, leftl='FR')    res['PortCosts'] = ds.debbie_forward_table(consts['portcosts']) # TODO get from MIX    res['voyage_days'] = consts['voyage_days']    res['voyage_eca'] = consts['voyage_eca']    res['voyage_noneca'] = consts['voyage_noneca']    res['Freight $/t'] = res.FR * res.WS    res['GrossFreight'] = consts['dwt'] * res.FR * res.WS    return resdef calc_base_fwd(consts):    fwd = cdb.curve(consts['ws_fwd'])    # fwd World scale from Braemar daily emails    fwd = pdu.mergets(fwd, cdb.curve(consts['fr']), leftl='WS', rightl='FR')    fwd = pdu.mergets(fwd, ds.debbie_forward_table(consts['portcosts'], hist=False), rightl='PortCosts') # TODO get from mix    fwd['Freight $/t'] = fwd.FR * fwd.WS    fwd['GrossFreight'] = consts['dwt'] * fwd.FR * fwd.WS    fuels = rott_fuels_fwd    if consts['fuelloc'] == 'sing':        fuels = sing_fuels_fwd    vlsfo = cdb.curve(fuels['VLSFO']) + 5 # todo Move to lim when uploads stable    mgo = cdb.curve(fuels['MGO']) + 5 # todo Move to lim when uploads stable    fwd = pdu.mergets(fwd, vlsfo, rightl='VLSFO')    fwd = pdu.mergets(fwd, mgo, rightl='MGO')    # only In ECA world now so have to use VLSFO + MGO in port    fwd['BunkerCost'] = (fwd.VLSFO * consts['voyage_noneca']) + (fwd.MGO * consts['voyage_eca'])    return fwddef tc2(): # Rott to NYH    consts = tce_consts.tc2    hist = calc_base(consts)    # GRT Port rott dues    hist = rott_port_dues(hist, consts, histfwd=True)    hist['BunkerCost'] = hist.apply(lambda x: eca_fuel_history(x), 1)    hist = common_calcs(hist, consts)    fwd = None    fwd = calc_base_fwd(consts)    fwd = rott_port_dues(fwd, consts, histfwd=False)    fwd = common_calcs(fwd, consts)    return hist, fwd